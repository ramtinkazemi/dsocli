trigger:
- master

pool:
  vmImage: 'macOS-10.15'

variables:
  - group: main

steps:

- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: Install Node.js

- script: |
    npm install -g react-native-cli
  displayName: Install react-native cli


- script: |
    npm install
    # npm run build
  displayName: 'npm install'


# - script: |
#     npm run lint
#   displayName: Run lint

# - script: |
#     npm run test
#   displayName: Run unit tests

# - task: InstallAppleCertificate@2
#   inputs:
#     certSecureFile: cr-mobile-app-ios-cert.p12
#     certPwd: $(AppleCertP12Password)
#     keychain: 'temp'
#     deleteCert: true
#   displayName: Install Apple Certificate

# - task: InstallAppleProvisioningProfile@1
#   inputs:
#     provisioningProfileLocation: 'secureFiles'
#     provProfileSecureFile: 'AppleProvisioningProfile.mobileprovision'
#   displayName: Install Apple Provisioning Profile

# - task: AppCenterDistribute@1
#   inputs:
#     serverEndpoint: 'appcenter'
#     appSlug: 'place your appSlug herer'
#     appFile: 'cr-mobile-app-test-android.apk'
#     releaseNotesOption: 'input' # Options: input, file
#     releaseNotesInput: $(Build.SourceVersionMessage) # Required when releaseNotesOption == Input
#     distributionGroupId: 'place your distributionGroupId here'
#   displayName: Distribute Android app to AppCenter


- script: |
    react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/build/intermediates/res/merged/release/  
  displayName: Create bundle for Android

# - task: Gradle@2
#   inputs:
#     workingDirectory: 'android'
#     gradleWrapperFile: 'android/gradlew'
#     tasks: 'assembleRelease'
#   continueOnError: false

- script: |
    cd android
    rm -rf android/app/build/intermediates/res/merged/release/drawable-*
    ./gradlew clean
    ./gradlew assembleRelease
    cd ..
  displayName: Create release for Android


# - script: |
#     cd ios
#     bundle install
#     fastlane build
#   displayName: 'Build iOS'

# - script: |
#     cd android
#     bundle install
#     fastlane build
#   displayName: 'Build android'


- script: 
    mv android/app/build/outputs/apk/release/cr-mobile-app-test-android.apk cr-mobile-app-test-android.apk
  displayName: Android Postprocess
  continueOnError: false

# - task: AndroidSigning@3
#   inputs:
#     apkFiles: 'cr-mobile-app-test-android.apk'
#     apksign: true # Optional
#     apksignerKeystoreFile: 'my-release-key.keystore' # Required when apksign == True
#     apksignerKeystorePassword: $(KeystorePassword) # Optional
#     apksignerKeystoreAlias: $(KeystoreAlias) # Optional
#     apksignerKeyPassword: $(KeyPassword) # Optional
#     #apksignerArguments: '--verbose' # Optional
#     #apksignerFile: # Optional
#     #zipalign: true # Optional
#     #zipalignFile: # Optional


# - task: AppCenterDistribute@1
#   inputs:
#     serverEndpoint: 'appcenter'
#     appSlug: 'place your appSlug herer'
#     appFile: 'cr-mobile-app-test-android.apk'
#     releaseNotesOption: 'input' # Options: input, file
#     releaseNotesInput: $(Build.SourceVersionMessage) # Required when releaseNotesOption == Input
#     distributionGroupId: 'place your distributionGroupId here'
#   displayName: Distribute Android app to AppCenter


- task: CopyFiles@2
  inputs:
    contents: 'cr-mobile-app-test-android.apk'
    targetFolder: $(Build.ArtifactStagingDirectory)

# - task: ShellScript@2
#   inputs:
#     scriptPath: appcenter-post-build.sh
#   displayName: Post Build Script

# - task: PublishBuildArtifacts@1
